<!--
 * @Author: your name
 * @Date: 2020-02-23 19:20:37
 * @LastEditTime: 2020-03-02 21:27:27
 * @LastEditors: Please set LastEditors
 * @Description: In User Settings Edit
 * @FilePath: \amp-server\views\render.ejs
 -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <title><%= title %></title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link rel="stylesheet" href="/iconfont/iconfont.css">
  <link rel="stylesheet" href="/stylesheets/vendors/antd.min.css" />
</head>

<body>
  <div id="root"></div>

  <script src="/javascripts/vendors/axios.min.js"></script>
  <script crossorigin src="/javascripts/vendors/react.development.js"></script>
  <script crossorigin src="/javascripts/vendors/react-dom.development.js"></script>
  <script crossorigin src="/javascripts/vendors/babel.min.js"></script>
  <script src="/javascripts/vendors/antd.min.js"></script>

  <% componentList.forEach(component => { %>
  <script type="text/babel" src="/components/<%= component.name %>/index.js"></script>
  <% }); %>

  <script>
    (function () {
      window['AMP_COMPONENTS_LIST'] = <%- JSON.stringify(componentList) %>;
    })();
  </script>

  <script type="text/babel">
    const { Empty, Button, Spin } = antd;

    class App extends React.Component {
      constructor(props) {
        super(props);

        const componentList = window['AMP_COMPONENTS_LIST'].map(component => {
          component.componentName = component.name.replace(/^(\w)/, ($0, $1) => $1.toUpperCase()).replace(/-(\w)/g, ($0, $1) => $1.toUpperCase());

          return component;
        });

        this.state = {
          loading: false,
          siteId: Infinity,
          pageId: Infinity,
          uid: Infinity,
          data: [],
          componentList,
          actions: {
            position: {
              top: 0,
              left: 0
            },
            width: 0,
            height: 0,
            visible: false
          }
        };
      }

      send2sandbox = (action, payload) => {
        window.parent.postMessage({
          action,
          payload,
          from: 'render'
        }, '*');
      }

      receiveSandboxMessage = (e) => {
        this.setState({
          loading: true
        });

        setTimeout(() => {
          this.setState({
            loading: false,
            // ...e.data.payload.previewData
          });
        }, 1000);
      }

      onContainerMove = (e) => {
        // console.log(123, e.nativeEvent.target);
        // console.log(e.clientX - e.target.offsetLeft);
        // console.log(e.nativeEvent.target.parentNode);

        let { target } = e.nativeEvent

        while (target && target.classList && !target.classList.contains('amp-component')) {
          target = target.parentNode;
        }

        if (!target || !target.classList || !target.classList.contains('amp-component')) {
          return false;
        }

        this.setState({
          uid: target.getAttribute('uid'),
          actions: {
            ...this.state.actions,
            visible: true,
            width: target.offsetWidth,
            height: target.offsetHeight,
            position: {
              top: target.offsetTop,
              left: target.offsetLeft
            }
          }
        });
      }

      onSettingClick = async () => {
        await this.removeComponentPlaceholder();

        this.send2sandbox('view-schema', {
          uid: this.state.uid,
          packageId: this.state.componentList.find(i => i.uid === this.state.uid).packageId
        });
      }

      removeComponentPlaceholder() {
        const componentList = [...this.state.componentList];
        const placeholderIndex = componentList.findIndex(i => i.type === 'placeholder');

        if (placeholderIndex !== -1) {
          componentList.splice(placeholderIndex, 1);
        }

        this.setState({
          componentList
        });
      }

      onCreateClick = async (direction) => {
        await this.removeComponentPlaceholder();

        const componentList = [...this.state.componentList];
        const targetIndex = componentList.findIndex(i => i.uid === this.state.uid);
        let insertIndex = -1;

        if (direction === 'up') {
          insertIndex = targetIndex - 1;
        }

        if (direction === 'down') {
          insertIndex = targetIndex + 1;
        }

        if (insertIndex === -1) {
          insertIndex = 0;
        }

        componentList.splice(insertIndex, 0, { type: 'placeholder' });

        this.setState({
          componentList
        })

        this.send2sandbox('view-resource', {
          uid: this.state.uid,
          direction: 'previous'
        })
      }

      renderPage() {
        if (!this.state.componentList.length) {
          return (
            <div className="layout-fullscreen layout-flexcenter">
              <Empty
                description={
                  <Button type="link">请添加组件</Button>
                }
                onClick={e => this.send2sandbox('view-resource')}
              />
            </div>
          );
        }

        // console.log('页面组件渲染', this.state.componentList)

        return (
          <div
            className="amp-component-list-container"
            onMouseMove={this.onContainerMove}
          >
            {
              this.state.componentList.length > 0 && this.state.componentList.map(component => component.type === 'placeholder' ?
                <div className="amp-component-placeholder" key="amp-component-placeholder">添加至此处</div> :
                React.createElement(

                  window[component.componentName],
                  {
                    uid: component.uid,
                    key: component.uid
                  },
                  null
                )
              )
            }

            <div className="amp-component-actions" style={{ top: this.state.actions.position.top, left: this.state.actions.position.left, width: this.state.actions.width, height: this.state.actions.height, display: this.state.actions.visible ? 'block' : 'none' }}>
              <i className="iconfont icon-increase icon-increase-up" onClick={() => this.onCreateClick('up')} />

              <div className="amp-component-actions-tools">
                <div className="amp-component-actions-tools-item">
                  <i className="iconfont icon-setting" onClick={() => this.onSettingClick()} />
                </div>
                <div className="amp-component-actions-tools-item">
                  <i className="iconfont icon-upward" />
                </div>
                <div className="amp-component-actions-tools-item">
                  <i className="iconfont icon-down" />
                </div>
              </div>

              <i className="iconfont icon-increase icon-increase-down" onClick={() => this.onCreateClick('down')} />
            </div>
          </div>
        );
      }

      componentDidMount() {
        /* axios.get('http://localhost:3000/api/site/package/common?subType=pkg').then(res => {
          // console.log(11111, res);
        }); */

        window.addEventListener('message', this.receiveSandboxMessage, false);
      }

      componentWillUnmount() {
        window.removeEventListener('message', this.receiveSandboxMessage, false);
      }

      render() {
        return (
          <div className="layout">
            {
              this.state.loading ? <div className="layout-loading">
                <Spin />
              </div> : this.renderPage()
            }
          </div>
        );
      }
    }

    ReactDOM.render(
      <App />,
      document.getElementById('root')
    );
  </script>
</body>

</html>